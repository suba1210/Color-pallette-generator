<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coolors</title>
    <link rel="stylesheet" href="/css/createstyle.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Vollkorn&display=swap" rel="stylesheet">


</head>

<body>
    <% let username = currentUser.username %> 
    <% let id = currentUser._id %> 

    <div class='header'>

        <div><h1 style='margin:20px;color:blueviolet'>Coolors</h1></div>

        <div>

            
            <a style='margin:20px;text-decoration: none;font-weight: bolder;color:blueviolet' href='/color/create'>Home</a>

            <a style='margin:20px;text-decoration: none;font-weight: bolder;color:blueviolet' href='/user/colors/show/<%=currentUser._id%>'>Your Color Pallettes</a>   

            <a style='margin:20px;text-decoration: none;font-weight: bolder;color:blueviolet' href='/logout'>Logout</a>


        </div>


    </div>

    <p style='font-weight: bolder;color:blueviolet;text-align: center;'>Coolors can generate you color pallettes of length from 2 to 8 !</p>
    
    
    <div class='pallete'>

        <div class='column' >


            <input type='color' id='picker' name='picker' onchange="this.nextElementSibling.style.backgroundColor= this.value ;">
            <div class='color'></div>
            <div class='button'>—</div>

        </div>

        <div class='column'>

            <input type='color' id='picker' name='picker' onchange="this.nextElementSibling.style.backgroundColor= this.value ;">
            <div class='color'></div>
            <div class='button'>—</div>

        </div>

        <div class='column' >

            <input type='color' id='picker' name='picker' onchange="this.nextElementSibling.style.backgroundColor= this.value ;">
            <div class='color'></div>
            <div class='button'>—</div>

        </div>

        <div class='column'>
            <input type='color' id='picker' name='picker' onchange="this.nextElementSibling.style.backgroundColor= this.value ;">
            <div class='color'></div>
            <div class='button'>—</div>

        </div>

        <div class='column' >
            <input type='color' id='picker' name='picker' onchange="this.nextElementSibling.style.backgroundColor= this.value ;">
            <div class='color'></div>
            <div class='button'>—</div>

        </div>


    </div>

    <br>

    <div class='center'  >

    <button id='addButton'>ADD COLOR</button>
    
    <button id='randButton'>Generate Random Colors</button>

    <button onclick='send()' id='saveButton'>SAVE PALLETTE</button>

    <br><br>

    </div>

</body>

<script>


let username = '<%-username%>';
let id = '<%-id%>';

localStorage.setItem('username',`${username}`);
localStorage.setItem('id',`${id}`);



let colorSelect = document.querySelectorAll('.color');
let background=[];
let buttons = document.querySelectorAll('.button');
let addButtonSelect = document.getElementById('addButton');
let palleteSelect = document.querySelector('.pallete');


function randomGeneartor(){
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

colorSelect.forEach((color)=>{
    let randomColor = randomGeneartor();
    color.style.backgroundColor = randomColor;
})


buttons.forEach((button)=>{
    button.addEventListener('click',()=>{
        button.parentNode.parentNode.removeChild(button.parentNode);
        checkCount();
        checkColumns()
    })
})


addButtonSelect.addEventListener('click',()=>{
    let a = document.createElement("div");
    a.className="column";
    palleteSelect.appendChild(a);

    let i = document.createElement('input');
    i.setAttribute("type", "color");
    i.setAttribute("name", "picker");
    i.onchange = function(){i.nextElementSibling.style.backgroundColor= i.value;}
    a.appendChild(i);

    let b = document.createElement("div");
    b.className = 'color';
    b.style.backgroundColor = randomGeneartor();
    a.appendChild(b);

    let c = document.createElement("div");
    c.className = 'button';
    let txt=document.createTextNode('—');
    c.appendChild(txt);
    a.appendChild(c);
    c.addEventListener('click',()=>{
        c.parentNode.parentNode.removeChild(c.parentNode);
        checkCount();
        checkColumns()
    })

    

    checkCount();
    checkColumns();
})



function checkCount(){
    if(document.querySelectorAll('.column').length<=2)
    {
        document.querySelectorAll('.button').forEach((button)=>{
            button.style.display='none';
        })
    }
    else{
        document.querySelectorAll('.button').forEach((button)=>{
            button.style.display='flex';
        })
    }
    return;
}


function checkColumns(){

    if(document.querySelectorAll('.column').length>=8){
        addButtonSelect.style.display = 'none';
    }
    else{
        addButtonSelect.style.display = 'block';
    }
    return;

}

let randButtonSelect = document.getElementById('randButton');


randButtonSelect.addEventListener('click',()=>{
    document.querySelectorAll('.color').forEach((color)=>{
    let randomColor = randomGeneartor();
    color.style.backgroundColor = randomColor;
})
})



const saveButton = document.getElementById('saveButton');


function send () {
    let sendingColors = [];
    let colorSend = document.querySelectorAll('.color');
    colorSend.forEach((color)=>{
        sendingColors.push(color.style.backgroundColor);
    })

    let userId = localStorage.getItem('id');
    console.log(userId);

    const data = {
        colors : sendingColors,
        owner : userId
    }
    console.log(data);

    var xhr = new window.XMLHttpRequest()
    xhr.open('POST', "http://localhost:3000/data" , true)
    xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8')
    xhr.send(JSON.stringify(data));
    alert("Your Pallete is saved!")

}




</script>